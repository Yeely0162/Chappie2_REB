#include "Setting.h"

static CHAPPIE* Device;
static LGFX_EmmaDisplay* Lcd;
static LGFX_Sprite* Screen;
static lv_obj_t * setting_list;
static lv_style_t EXIT_btn_style;
lv_timer_t *Status_update_timer;
enum {
    LV_MENU_ITEM_BUILDER_VARIANT_1,
    LV_MENU_ITEM_BUILDER_VARIANT_2
};
typedef uint8_t lv_menu_builder_variant_t;

// static void back_event_handler(lv_event_t * e);
static void switch_handler(lv_event_t * e);
lv_obj_t * root_page;
static void WiFi_AP_Switch_Handler(lv_event_t * e);
static lv_obj_t * create_text(lv_obj_t * parent, const void * icon, const char * txt,
                                        lv_menu_builder_variant_t builder_variant);
static lv_obj_t * create_slider(lv_obj_t * parent,
                                   const char * icon, const char * txt, int32_t min, int32_t max, int32_t val);
static lv_obj_t * create_switch(lv_obj_t * parent,
                                   const char * icon, const char * txt, bool chk);
static void Created_Setting_Home(lv_obj_t * obj,
                                   const void * icon,const char * txt,lv_obj_t * menu,lv_obj_t * son);
static void ContentBox(lv_obj_t * ob,const char * ttitle,const char * content,bool select = 1);
// void Ap_update(lv_timer_t * timer)
// {
//     Device->Wf.WiFiloop();
// }
void Status_update(lv_timer_t * timer)
{
    Device->Wf.WiFiloop();
}


void SettingPage(void)
{
    
    // -----style
    lv_obj_t * btn;
    lv_style_init(&EXIT_btn_style);//初始化样式
    lv_style_set_align(&EXIT_btn_style,LV_FLEX_ALIGN_CENTER);
    lv_style_set_text_font(&EXIT_btn_style,&lv_font_montserrat_14);
    //----
    lv_obj_t * menu = lv_menu_create(lv_scr_act());
    //background color
    // lv_obj_set_style_bg_color(menu, lv_color_hex(0x4D5B74), LV_PART_MAIN | LV_STATE_DEFAULT);

    lv_menu_set_mode_root_back_btn(menu, LV_MENU_ROOT_BACK_BTN_ENABLED);
    // lv_obj_add_event_cb(menu, back_event_handler, LV_EVENT_CLICKED, menu);

    lv_obj_set_size(menu, lv_disp_get_hor_res(NULL), lv_disp_get_ver_res(NULL));
    lv_obj_center(menu);

    lv_obj_t * cont;
    lv_obj_t * section;

    /*Create sub pages*/
    

    lv_obj_t * sub_wifi_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_wifi_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_wifi_page);
    lv_obj_set_style_bg_color(sub_wifi_page, lv_color_hex(0x4D5B74), LV_PART_MAIN | LV_STATE_DEFAULT);
    section = lv_menu_section_create(sub_wifi_page);
    ContentBox(section,LV_SYMBOL_WIFI,"Disconnect",false);
    lv_obj_t * AP_switch = create_switch(section, NULL, "AP Mode", false);
    lv_obj_add_event_cb(lv_obj_get_child(AP_switch,2),WiFi_AP_Switch_Handler,LV_EVENT_VALUE_CHANGED,menu);
    ContentBox(section,"MAC:",Device->Wf.info.WiFiMac);



    lv_obj_t * sub_bluetooth_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_bluetooth_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_bluetooth_page);
    section = lv_menu_section_create(sub_bluetooth_page);
    create_slider(section, LV_SYMBOL_SETTINGS, "Velocity", 0, 150, 120);
    create_slider(section, LV_SYMBOL_SETTINGS, "Acceleration", 0, 150, 50);
    create_slider(section, LV_SYMBOL_SETTINGS, "Weight limit", 0, 150, 80);

    lv_obj_t * sub_time_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_time_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_time_page);
    section = lv_menu_section_create(sub_time_page);
    create_switch(section, NULL, "Auto Time Mode", true);
    
    lv_obj_t * sub_display_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_display_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_display_page);
    section = lv_menu_section_create(sub_display_page);
    create_slider(section, LV_SYMBOL_SETTINGS, "Brightness", 0, 150, 100);


    lv_obj_t * sub_battery_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_battery_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_battery_page);
    section = lv_menu_section_create(sub_battery_page);
    create_slider(section, LV_SYMBOL_BATTERY_FULL, "Brightness", 0, 150, 100);


    lv_obj_t * sub_software_info_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_software_info_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    section = lv_menu_section_create(sub_software_info_page);
    
    // lv_obj_align_to(cont_col, cont_row, LV_ALIGN_OUT_BOTTOM_MID, 0, 5);
    
    ContentBox(section,"Firmware:","Chappie 2");
    ContentBox(section,"Author:","Yeely");
    ContentBox(section,"LVGL:",LVGL_VERSION_INFO);
    ContentBox(section,"Compiler:\n",VERSION_BUILD_TIME);
    ContentBox(section,"Version:","V1.1");
    lv_obj_t * sub_about_page = lv_menu_page_create(menu, NULL);
    lv_obj_set_style_pad_hor(sub_about_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    lv_menu_separator_create(sub_about_page);

    section = lv_menu_section_create(sub_about_page);
    cont = create_text(section, NULL, "Software information", LV_MENU_ITEM_BUILDER_VARIANT_1);
    lv_menu_set_load_page_event(menu, cont, sub_software_info_page);

    // lv_obj_t * sub_menu_mode_page = lv_menu_page_create(menu, NULL);
    // lv_obj_set_style_pad_hor(sub_menu_mode_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    // lv_menu_separator_create(sub_menu_mode_page);
    // section = lv_menu_section_create(sub_menu_mode_page);
    // cont = create_switch(section, LV_SYMBOL_AUDIO, "Sidebar enable", true);
    // lv_obj_add_event_cb(lv_obj_get_child(cont, 2), switch_handler, LV_EVENT_VALUE_CHANGED, menu);

    /*Create a root page*/
    root_page = lv_menu_page_create(menu, "Setting");
    // lv_obj_set_style_pad_hor(root_page, lv_obj_get_style_pad_left(lv_menu_get_main_header(menu), 0), 0);
    section = lv_menu_section_create(root_page);
    
    
    Created_Setting_Home(//WiFi
        section,
        ResourcePool::GetImage("wifi_dark"),
        NULL,
        menu,
        sub_wifi_page
    );
    Created_Setting_Home(//Bluetooth
        section,
        ResourcePool::GetImage("bluetooth_dark"),
        NULL,
        menu,
        sub_bluetooth_page
    );
    Created_Setting_Home(//Time
        section,
        ResourcePool::GetImage("clock_dark"),
        NULL,
        menu,sub_time_page
    );
    Created_Setting_Home(//Display
        section,
        ResourcePool::GetImage("monitor_dark"),
        NULL,
        menu,sub_display_page
    );
    Created_Setting_Home(//Battery
        section,
        ResourcePool::GetImage("battery_dark"),
        NULL,
        menu,
        sub_battery_page
    );
    Created_Setting_Home(//About
        section,
        ResourcePool::GetImage("about_dark"),
        NULL,
        menu,
        sub_about_page
    );
    lv_menu_set_sidebar_page(menu, root_page);
    lv_event_send(lv_obj_get_child(lv_obj_get_child(lv_menu_get_cur_sidebar_page(menu), 0), 0), LV_EVENT_CLICKED, NULL);
    Status_update_timer = lv_timer_create(Status_update,500, NULL);
    Status_update(Status_update_timer);     // status bar time update
}

static void ContentBox(lv_obj_t * ob,const char * ttitle,const char * content,bool select){
    lv_obj_t * box = lv_obj_create(ob);
    lv_obj_set_style_bg_color(box, lv_color_hex(0x0093E9),0);
    lv_obj_set_style_bg_opa(box, 50,0);
    lv_obj_set_style_radius(box,0,0);
    lv_obj_set_style_border_opa(box,0,0);
    lv_obj_t * tt =lv_label_create(box);
    lv_obj_t * ct =lv_label_create(box);
    lv_obj_set_width(box,180);
    lv_obj_set_height(box,50);
    lv_label_set_text(tt, ttitle);
    if (select){
        lv_obj_set_style_text_font(tt,ResourcePool::GetFont("bahnschrift_17"),0);
    }
    lv_obj_set_align(tt,LV_FLEX_ALIGN_START);
    lv_label_set_text(ct, content);
    lv_obj_set_align(ct,LV_FLEX_ALIGN_SPACE_EVENLY);
}
static void Created_Setting_Home(lv_obj_t * obj,const void * icon,const char * txt,lv_obj_t * menu,lv_obj_t * son){
    lv_obj_t * cont = create_text(obj, icon, txt, LV_MENU_ITEM_BUILDER_VARIANT_1);
    // lv_obj_add_style(cont, &EXIT_btn_style, 0); //添加样式
    lv_menu_set_load_page_event(menu, cont, son);
}
static void WiFi_AP_Switch_Handler(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
    // lv_obj_t * menu = lv_event_get_user_data(e);
    lv_obj_t * obj = lv_event_get_target(e);
    if(code == LV_EVENT_VALUE_CHANGED || LV_EVENT_CLICKED) {
        if (lv_obj_has_state(obj, LV_STATE_CHECKED)){
            // Ap_update_timer = lv_timer_create(Ap_update,500, NULL);
            // Ap_update(Ap_update_timer);     // status bar time update
            Device->Wf.APMode();
        }else {
           Device->Wf.APClose();
        //    lv_timer_del(Ap_update_timer);
        }
    }
}
static void switch_handler(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * menu = lv_event_get_user_data(e);
    lv_obj_t * obj = lv_event_get_target(e);
    if(code == LV_EVENT_VALUE_CHANGED) {
        if(lv_obj_has_state(obj, LV_STATE_CHECKED)) {
            lv_menu_set_page(menu, NULL);
            lv_menu_set_sidebar_page(menu, root_page);
            lv_event_send(lv_obj_get_child(lv_obj_get_child(lv_menu_get_cur_sidebar_page(menu), 0), 0), LV_EVENT_CLICKED, NULL);
        }else {
            lv_menu_set_sidebar_page(menu, NULL);
            lv_menu_clear_history(menu); /* Clear history because we will be showing the root page later */
            lv_menu_set_page(menu, root_page);
        }
    }
}

static lv_obj_t * create_text(lv_obj_t * parent, const void * icon, const char * txt,
                                        lv_menu_builder_variant_t builder_variant)
{
    lv_obj_t * obj = lv_menu_cont_create(parent);

    lv_obj_t * img = NULL;
    lv_obj_t * label = NULL;

    if(icon) {
        img = lv_img_create(obj);
        // lv_obj_enable_style_refresh(false);
        lv_obj_align(img,LV_ALIGN_CENTER,5,0);
        lv_img_set_src(img, icon);
    }

    if(txt) {
        label = lv_label_create(obj);
        lv_label_set_text(label, txt);
        lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR);
        lv_obj_set_flex_grow(label, 1);
    }

    if(builder_variant == LV_MENU_ITEM_BUILDER_VARIANT_2 && icon && txt) {
        lv_obj_add_flag(img, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK);
        lv_obj_swap(img, label);
    }

    return obj;
}

static lv_obj_t * create_slider(lv_obj_t * parent, const char * icon, const char * txt, int32_t min, int32_t max, int32_t val)
{
    lv_obj_t * obj = create_text(parent, icon, txt, LV_MENU_ITEM_BUILDER_VARIANT_2);

    lv_obj_t * slider = lv_slider_create(obj);
    lv_obj_set_flex_grow(slider, 1);
    lv_slider_set_range(slider, min, max);
    lv_slider_set_value(slider, val, LV_ANIM_OFF);

    if(icon == NULL) {
        lv_obj_add_flag(slider, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK);
    }

    return obj;
}

static lv_obj_t * create_switch(lv_obj_t * parent, const char * icon, const char * txt, bool chk)
{
    lv_obj_t * obj = create_text(parent, icon, txt, LV_MENU_ITEM_BUILDER_VARIANT_1);
    
    lv_obj_t * sw = lv_switch_create(obj);
    lv_obj_add_state(sw, chk ? LV_STATE_CHECKED : 0);

    return obj;
}

void Setting_Destroy(){
    lv_timer_del(Status_update_timer);

}